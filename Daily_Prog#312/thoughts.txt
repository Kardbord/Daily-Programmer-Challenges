Thought 1
    Algorithm:

    1. Begin w/ least significant digit at position n (unless it is a 0 or 1, then immediately move to the next
       position).
    2. Compare it to digit in position n - 1, n - 2, etc until it is larger than the digit in that position, and
       then swap the two.

         If steps 1 and 2 result in reaching the most significant digit without success in step 2, begin again at
         position n - 1 and repeat steps one and two until step two is successful

    3. Sort all the digits in positions less significant than the digit swapped in step 2 from least to greatest

    Notes: This algorithm is at least O(n^2) in the worst case -- would be nice to do better... but I can't think of
    any way to do better, so this is probably what I'll do. I think this is more efficient than the algorithm in
    Thought 2 since we don't bother creating a lot of incorrect and unnecessary permutations. This is a greedy algorithm
    (I think).

Thought 2
    Algorithm: Create all permutations of the inputted number and sort them from least to greatest, then do some sort of
    binary search to locate the starting number, then move one further in the array.

    Notes: I accidentally saw this as someone else's solution on the challenge page. Seems like creating all
    permutations is unnecessarily complex and inefficient. Unless I'm mistaken (and I could well be) then the algorithm
    I thought of in Thought 1 seems like a better solution than this.